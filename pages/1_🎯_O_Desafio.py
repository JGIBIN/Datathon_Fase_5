# pages/1_üéØ_O_Desafio.py

import streamlit as st
from utils import setup_page

# Configura a p√°gina e a barra lateral
setup_page(__file__)

# --- T√çTULO DA P√ÅGINA ---
st.markdown("# O Desafio: IA no Recrutamento e Sele√ß√£o")
st.markdown("---")

# --- CONTEXTO INICIAL ---
st.markdown(
    """
    A **Decision**, como empresa especializada em aloca√ß√£o de talentos de TI (bodyshop), 
    enfrenta o desafio constante de encontrar o candidato ideal para cada vaga de forma 
    r√°pida e precisa. O processo de "match" entre um profissional e uma oportunidade √© complexo e envolve m√∫ltiplas vari√°veis.
    """
)

# --- PROBLEMA CENTRAL ---
st.subheader("üéØ O Problema Central: Efici√™ncia vs. Precis√£o")
st.markdown(
    """
    O principal desafio era como otimizar a triagem inicial de curr√≠culos sem sacrificar a qualidade da an√°lise. As dores do processo manual inclu√≠am:

    - **Falta de Padroniza√ß√£o:** Diferentes recrutadores podiam ter abordagens distintas, levando √† perda de informa√ß√µes valiosas sobre os candidatos.
    - **Dificuldade em Medir Engajamento:** Era um desafio identificar o real interesse e a compatibilidade t√©cnica do candidato nas primeiras etapas.
    - **Agilidade vs. Qualidade:** A press√£o para preencher vagas rapidamente podia levar a saltar etapas cruciais, resultando em um "match" de menor ader√™ncia e potencial retrabalho.
    """
)

# --- OBST√ÅCULOS ("PERCAL√áOS") ---
st.subheader("üöß Os Percal√ßos do Desenvolvimento")
st.markdown(
    """
    Durante a constru√ß√£o da solu√ß√£o, enfrentamos alguns desafios t√©cnicos significativos:

    1.  **Dados Heterog√™neos:** Os dados dos candidatos n√£o est√£o em uma forma consistente, misturando informa√ß√µes estruturadas (n√≠vel de experi√™ncia, forma√ß√£o) com uma grande massa de texto n√£o estruturado (curr√≠culos, descri√ß√µes de atividades, coment√°rios). Tratar e padronizar essa variedade foi o primeiro grande obst√°culo.

    2.  **Engenharia de Features:** Como transformar texto livre ‚Äî com seus jarg√µes, abrevia√ß√µes e sem√¢ntica complexa ‚Äî em features num√©ricas que um modelo de Machine Learning pudesse entender? Foi necess√°rio aplicar t√©cnicas de Processamento de Linguagem Natural (NLP), como a vetoriza√ß√£o TF-IDF, para converter palavras em vetores que representam sua import√¢ncia.

    3.  **Defini√ß√£o do "Sucesso":** O que define um "bom match"? Foi preciso usar o hist√≥rico de contrata√ß√µes da Decision para treinar o modelo. O alvo da previs√£o se tornou a probabilidade de um candidato ser considerado aderente √† vaga, com base nos padr√µes de perfis que tiveram sucesso no passado.
    """
)

# --- A SOLU√á√ÉO E O MODELO ---
st.subheader("üí° Nossa Proposta e a Escolha do Modelo")
st.markdown(
    """
    Para solucionar essas dores, propomos um **MVP (Minimum Viable Product)** que utiliza Machine Learning para automatizar e otimizar a triagem inicial.

    A solu√ß√£o √© um **modelo preditivo que calcula um "score" de compatibilidade** entre o perfil de um candidato e a descri√ß√£o de uma vaga.

    **Por que adotamos este modelo?**
    - **Combina√ß√£o de Dados:** A abordagem escolhida, utilizando um pipeline do `scikit-learn`, nos permitiu combinar de forma eficaz tanto os dados estruturados (n√≠veis, forma√ß√£o) quanto o texto n√£o estruturado (habilidades, experi√™ncias).
    - **Performance com XGBoost:** O cora√ß√£o do nosso modelo √© o `XGBoost`, um algoritmo de Gradient Boosting. Ele foi escolhido por sua alta performance em dados tabulares e heterog√™neos (como os nossos, ap√≥s a engenharia de features), sua robustez e capacidade de capturar intera√ß√µes complexas entre as vari√°veis.
    - **Interpretabilidade e Efici√™ncia:** O modelo n√£o s√≥ oferece uma predi√ß√£o precisa, mas tamb√©m √© eficiente, permitindo uma an√°lise em tempo real. Isso cria uma ferramenta poderosa para auxiliar a equipe de recrutamento a focar nos candidatos com maior potencial.

    > **Navegue at√© a p√°gina 'An√°lise de Compatibilidade' para ver a solu√ß√£o em a√ß√£o!**
    """
)